##
# Вычисляем периметр заданного многоугольника
#
# Импортируем библиотеку math
import math


# Создаём функцию расчёта длины стороны многоугольника
def len_side_polygon(x, y):
    len_side = abs(
            math.sqrt(
                (float(x[1]) - float(x[0])) ** 2 + (float(y[1]) - float(y[0])) ** 2
            )
        )
    return len_side


# Запрашиваем у пользователя координаты как минимум 3-х точек,
# т.к. многоугольник может состоять только из трёх и более точек
x1 = float(input("Введите координату первой точки многоугольника по Х: "))
y1 = float(input("Введите координату первой точки по У: "))
x2 = float(input("Введите координату второй точки по Х: "))
y2 = float(input("Введите координату второй точки по Y: "))
x3 = float(input("Введите координату третьей точки по Х: "))
y3 = float(input("Введите координату третьей точки по Y: "))
# Записываем в переменные первые координаты
first_point_x = x1
first_point_y = y1
# Вычисляем длину первой стороны многоугольника
len_first_side = len_side_polygon((x1, x2), (y1, y2))
# Задаём начальное значение переменной для периметра
P = 0
while True:
    # Вычисляем длину следующей стороны многоугольника
    l_side = len_side_polygon((x2, x3), (y2, y3))
    # Вычисляем периметр
    P += l_side
    # Сохраняем значения в переменные для расчета следуещей длины стороны
    x2 = x3
    y2 = y3
    # Запрашиваем у пользователя следующие координаты
    x3 = input("Введите следующую координату X (Enter для окончания ввода): ")
    # Проверяем на пустую строку
    if x3 == "":
        break
    else:
        y3 = float(input("Введите следующую координату Y: "))
# Вычисляем длину последней стороны
len_last_side = len_side_polygon((x2, first_point_x), (y2, first_point_y))
# Вычисляем периметр многоугольника
P += len_first_side + len_last_side
# Выводим результат
print("Периметр многоугольника равен %.2f" % P)

# Evaluation: +-OK. Слишком много запрашивается точек. Надо было сделать так, чтобы при вводе пустого очередного X,
# программа заканчивалась.